name: Build and Push Docker Containers

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag to build (e.g., v1.0.2)'
        required: true
        type: string
      push_latest:
        description: 'Also push as :latest tag'
        required: false
        default: true
        type: boolean
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Container
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag || github.ref }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=MCP Hub Web Service
            org.opencontainers.image.description=Web service for MCP Hub installation and management
            org.opencontainers.image.vendor=MCP Hub
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Verify image
        run: |
          echo "✅ Successfully built and pushed:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'
          
          # Test the image
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag || github.ref_name }} python -c "import server; print('✅ Container works!')"
