name: Release MCP Hub

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Before Release
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies (without Docker package)
        run: |
          # Install Python dependencies WITHOUT Docker package for tests
          python -m pip install --upgrade pip
          pip install typer pyinstaller pyyaml toml pytest
          
          # Verify core CLI functionality (without Docker operations)
          python -c "from mcpctl.cli import app; print('CLI imports successfully')"

  build-cli:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: ubuntu-22.04-arm
            platform: linux
            arch: arm64
          - os: macos-13
            platform: macos
            arch: amd64
          - os: macos-latest
            platform: macos
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: amd64
    
    name: Build CLI (${{ matrix.platform }}-${{ matrix.arch }})
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies (without Docker package)
        run: |
          python -m pip install --upgrade pip
          pip install typer pyinstaller pyyaml toml
      
      - name: Build CLI binary
        run: |
          pyinstaller main.py -n mcpctl --onefile
      
      - name: Rename binary for release
        shell: bash
        run: |
          cd dist
          if [ "${{ matrix.platform }}" = "windows" ]; then
            mv mcpctl.exe mcpctl-${{ matrix.platform }}-${{ matrix.arch }}.exe
          else
            mv mcpctl mcpctl-${{ matrix.platform }}-${{ matrix.arch }}
          fi
      
      - name: Test CLI binary (Unix)
        if: matrix.platform != 'windows'
        run: |
          chmod +x ./dist/mcpctl-${{ matrix.platform }}-${{ matrix.arch }}
          ./dist/mcpctl-${{ matrix.platform }}-${{ matrix.arch }} --help
      
      - name: Test CLI binary (Windows)
        if: matrix.platform == 'windows'
        run: |
          .\dist\mcpctl-${{ matrix.platform }}-${{ matrix.arch }}.exe --help
      
      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcpctl-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/mcpctl-*

  build-electron:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            platform: macos
            arch: amd64
          - os: macos-latest  
            platform: macos
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: amd64
    
    name: Build Electron App (${{ matrix.platform }}-${{ matrix.arch }})
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Set up Python (for CLI)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies (without Docker package)
        run: |
          python -m pip install --upgrade pip
          pip install typer pyinstaller pyyaml toml
      
      - name: Build CLI for Electron
        run: |
          pyinstaller main.py -n mcpctl --onefile
          mkdir -p electron/build/bin
      
      - name: Copy CLI binary (Unix)
        if: matrix.platform != 'windows'
        run: |
          cp dist/mcpctl electron/build/bin/
      
      - name: Copy CLI binary (Windows)  
        if: matrix.platform == 'windows'
        run: |
          cp dist/mcpctl.exe electron/build/bin/
      
      - name: Install Electron dependencies
        run: |
          cd electron
          npm install
      
      - name: Build Electron app
        run: |
          cd electron
          npm run build
      
      - name: Rename build artifacts
        shell: bash
        run: |
          cd electron/dist
          for file in *; do
            if [ -f "$file" ]; then
              extension="${file##*.}"
              basename="${file%.*}"
              if [ "$extension" = "$file" ]; then
                mv "$file" "MCP-Hub-${{ matrix.platform }}-${{ matrix.arch }}"
              else
                mv "$file" "MCP-Hub-${{ matrix.platform }}-${{ matrix.arch }}.${extension}"
              fi
            fi
          done
      
      - name: Upload Electron artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.platform }}-${{ matrix.arch }}
          path: electron/dist/*

  create-release:
    needs: [build-cli, build-electron]
    runs-on: ubuntu-latest
    name: Create GitHub Release
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Generate checksums
        run: |
          mkdir -p release-assets
          
          # Collect CLI binaries from downloaded artifacts (avoid duplicates)
          find . -path "*/release-assets" -prune -o -name "mcpctl-*" -type f -print | while read file; do
            if [ ! -f "release-assets/$(basename "$file")" ]; then
              cp "$file" release-assets/
            fi
          done
          
          # Collect Electron apps from downloaded artifacts (avoid duplicates)
          find . -path "*/release-assets" -prune -o -name "MCP-Hub-*" -type f -print | while read file; do
            if [ ! -f "release-assets/$(basename "$file")" ]; then
              cp "$file" release-assets/
            fi
          done
          
          # Copy installation script from repository
          cp install.sh release-assets/
          
          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt
          
          echo "Release assets prepared:"
          ls -la
      
      - name: Read CHANGELOG
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            awk '/^## \['${{ steps.version.outputs.VERSION }}'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release-notes.md
          else
            echo "ðŸŽ‰ MCP Hub ${{ steps.version.outputs.VERSION }}" > release-notes.md
            echo "" >> release-notes.md
            echo "## ðŸ”§ Enhanced UX Features:" >> release-notes.md
            echo "- âœ… PATH immediate availability (no shell restart)" >> release-notes.md
            echo "- âœ… Smart port conflict resolution" >> release-notes.md
            echo "- âœ… Zero-friction installation experience" >> release-notes.md
            echo "- âœ… Improved Docker CLI fallback support" >> release-notes.md
            echo "" >> release-notes.md
            echo "## ðŸš€ Installation:" >> release-notes.md
            echo "\`\`\`bash" >> release-notes.md
            echo "curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash" >> release-notes.md
            echo "\`\`\`" >> release-notes.md
            echo "" >> release-notes.md
            echo "**Note:** Container images will be published separately to avoid CI conflicts." >> release-notes.md
            echo "" >> release-notes.md
            echo "See commits: https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.VERSION }}" >> release-notes.md
          fi
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.VERSION }} \
            --title "MCP Hub ${{ steps.version.outputs.VERSION }}" \
            --notes-file release-notes.md \
            --latest
      
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd release-assets
          for file in *; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload ${{ steps.version.outputs.VERSION }} "$file" --clobber
            fi
          done
      
      - name: Release Summary
        run: |
          echo "ðŸŽ‰ MCP Hub ${{ steps.version.outputs.VERSION }} Released Successfully!"
          echo ""
          echo "âœ… CLI Binaries: Available for all platforms"
          echo "âœ… Desktop Apps: Available for macOS, Windows, Linux"  
          echo "âœ… Installation Script: Ready for immediate use"
          echo ""
          echo "âš¡ Quick Install:"
          echo "   curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash"
          echo ""
          echo "ðŸ“‹ Next Steps:"
          echo "   - Container images will be published separately"
          echo "   - Enhanced UX features are now live!"
